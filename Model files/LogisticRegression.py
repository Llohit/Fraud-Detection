# -*- coding: utf-8 -*-
"""LogisticRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tlQpfb9Lrsv0rzIcArt_kHNWmdTSr5D2
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

from collections import Counter

dtr=pd.read_csv('../input/preprocessed/newdf2.csv')
dte=pd.read_csv('../input/preprocessed/newtest.csv')

Counter(dtr['isFraud'])

test=pd.read_csv('../input/its-a-fraud/test.csv')

dtr.drop(['Unnamed: 0'],axis=1,inplace=True)
dte.drop(['Unnamed: 0'],axis=1,inplace=True)

X_train=dtr.drop(['isFraud'],axis=1,inplace=False)
y_train=dtr['isFraud']

X_test=dte.copy()

from imblearn.over_sampling import SMOTE

smote = SMOTE(0.75,random_state=42)
X_res, y_res =  smote.fit_resample(x,y)

from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(random_state=0,penalty='none',max_iter=500,class_weight='balanced').fit(X_res, y_res)

df_res=clf.predict(X_test)

dte['IsFraud']=df_res

neww=dte[['TransactionID','IsFraud']]

test = test.merge(neww, how='outer',copy=False, on ='TransactionID' )

output = test['IsFraud']

from collections import Counter

Counter(df_res)

output.columns=['Id','isFraud']

print(output)

output=pd.DataFrame(output)

output.head()

output.columns

output.to_csv('output.csv',index=True,index_label='Id')

"""**Logistic Regression using SGD Classifier**"""

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import roc_auc_score
from sklearn.linear_model import SGDClassifier

x = dtr.drop(['isFraud'],axis=1,inplace=False)
y = dtr['isFraud']

x_train1,x_test1,y_train1,y_test1 = train_test_split(x,y,test_size=0.33, random_state=42)

type(x_test1)

sc = StandardScaler()
x_train1_sc = sc.fit_transform(x_train1)
x_test1_sc = sc.transform(x_test1)

clf1 = SGDClassifier(loss="log")
clf1.fit(x_train1_sc,y_train1)
y_train1_pred=clf1.predict_proba(x_train1_sc)
y_test1_pred = clf1.predict_proba(x_test1_sc)

print('train auc with default parameter:',roc_auc_score(y_train1,y_train1_pred[:,1]))
print('test auc with default parameter:',roc_auc_score(y_test1,y_test1_pred[:,1]))

df_res1=clf1.predict(X_test)

print(df_res1)

dte['IsFraud']=df_res1

neww=dte[['TransactionID','IsFraud']]

test = test.merge(neww, how='outer',copy=False, on ='TransactionID' )

output = test['IsFraud']

Counter(df_res1)

output.columns=['Id','isFraud']

output=pd.DataFrame(output)
output.to_csv('output.csv',index=True,index_label='Id')

"""For test, the default parameters are giving score of 0.46349 which is not a good one <br>
We will try tuning the hyperparameters
"""

alpha = [10**-2,10**-1,10**0,10**1,10**2]
penalty = ['l1','l2','elasticnet']

for i in alpha:
    for j in penalty:
        print('*******alpha=',i,', penalty=',j)
        clf1 = SGDClassifier(loss="log",class_weight='balanced',alpha=i,penalty=j)
        clf1.fit(x_train1_sc,y_train1)
        y_train1_pred=clf1.predict_proba(x_train1_sc)
        y_test1_pred = clf1.predict_proba(x_test1_sc)
        print('train auc:',roc_auc_score(y_train1,y_train1_pred[:,1]))
        print('test auc:',roc_auc_score(y_test1,y_test1_pred[:,1]))
        print('==================================')

"""We can see that the score is maximum when alpha=0.01 and penalty=l2"""

Counter(y)

clf1 = LogisticRegression(class_weight='balanced',alpha=0.1,penalty='l2')
clf1.fit(X_res,y_res)

y_test1_pred = clf1.predict(dte)

Counter(y_test1_pred)

dte['isFraud']=y_test1_pred

y_train1_pred=clf1.predict_proba(x_train1_sc)
y_test1_pred = clf1.predict_proba(x_test1_sc)

print('train auc with default parameter:',roc_auc_score(y_train1,y_train1_pred[:,1]))
print('test auc with default parameter:',roc_auc_score(y_test1,y_test1_pred[:,1]))

df_res1=clf1.predict(X_test)

dte['isFraud']=df_res1

neww=dte[['TransactionID','isFraud']]

test = test.merge(neww, how='outer',copy=False, on ='TransactionID' )

output = test['isFraud']

Counter(df_res1)

output.columns=['Id','isFraud']

output=pd.DataFrame(output)
output.to_csv('output.csv',index=True,index_label='Id')

