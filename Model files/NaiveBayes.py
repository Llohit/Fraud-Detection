# -*- coding: utf-8 -*-
"""naive-accuracury-0-65.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14_qlmvUmQBG5McHk2rAajs5sKH87n_k2
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

df2=pd.read_csv("../input/fraudaa/newdf2.csv")

ntese=pd.read_csv("../input/fraudaa/newtest.csv")

dte=pd.read_csv('../input/its-a-fraud/test.csv')

df2.shape

df2.drop(['Unnamed: 0'],axis=1,inplace=True)
ntese.drop(['Unnamed: 0'],axis=1,inplace=True)

df2.drop(['TransactionID'],axis=1,inplace=True)
X_test.drop(['TransactionID'],axis=1,inplace=True)

from sklearn.naive_bayes import GaussianNB

X_train=df2.drop(['isFraud'],axis=1,inplace=False)
y_train=df2['isFraud']

X_test=ntese.copy()

from imblearn.over_sampling import SMOTE

smote = SMOTE(0.75,random_state=42)
X_res, y_res =  smote.fit_resample(X_train,y_train)
#X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size = 0.25, random_state = 42)

from sklearn.preprocessing import MinMaxScaler
from sklearn.pipeline import Pipeline

p = Pipeline([('Normalizing',MinMaxScaler()),('GaussianNB',GaussianNB())])
p.fit(X_res,y_res)

y_pred=p.predict(X_test)

from collections import Counter
Counter(y_pred)

ntese['IsFraud']=y_pred

neww=ntese[['TransactionID','IsFraud']]

dte = dte.merge(neww, how='outer',copy=False, on ='TransactionID' )

dte['IsFraud']

y_predd=dte['IsFraud']

y_predd.to_csv('y_pred17.csv')